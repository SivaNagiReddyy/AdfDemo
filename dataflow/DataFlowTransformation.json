{
	"name": "DataFlowTransformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "employee_data",
						"type": "DatasetReference"
					},
					"name": "Employee"
				},
				{
					"dataset": {
						"referenceName": "departmentdata",
						"type": "DatasetReference"
					},
					"name": "Department"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DestinationData",
						"type": "DatasetReference"
					},
					"name": "DestinationData"
				}
			],
			"transformations": [
				{
					"name": "MergedData"
				},
				{
					"name": "DepartmentCount"
				},
				{
					"name": "DerivedColumn"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPLOYEE_ID as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          EMAIL as string,",
				"          PHONE_NUMBER as string,",
				"          HIRE_DATE as string,",
				"          JOB_ID as string,",
				"          SALARY as string,",
				"          COMMISSION_PCT as string,",
				"          MANAGER_ID as string,",
				"          DEPARTMENT_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employee",
				"source(output(",
				"          DEPARTMENT_ID as string,",
				"          DEPARTMENT_NAME as string,",
				"          MANAGER_ID as string,",
				"          LOCATION_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Department",
				"Employee, Department join(Employee@DEPARTMENT_ID == Department@DEPARTMENT_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> MergedData",
				"MergedData aggregate(groupBy(DEPARTMENT_NAME),",
				"     EMPLOYEE_ID = count(EMPLOYEE_ID)) ~> DepartmentCount",
				"DepartmentCount derive(DEPARTMENT_NAME = upper(DEPARTMENT_NAME)) ~> DerivedColumn",
				"DerivedColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Customer_id as string,",
				"          Customer_name as string,",
				"          Customer_email as string,",
				"          Customer_address as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DestinationData"
			]
		}
	}
}